!pip install transformers torch scikit-learn
!pip install torch
!pip install transformers

import pandas as pd
import torch
from torch.utils.data import DataLoader, Dataset
from transformers import BertTokenizer, BertForSequenceClassification, AdamW, get_linear_schedule_with_warmup
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from tqdm import tqdm

class CustomDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = str(self.texts[idx])
        label = int(self.labels[idx])
        encoding = self.tokenizer(
            text,
            add_special_tokens=True,
            truncation=True,
            max_length=self.max_len,
            padding='max_length',
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'label': torch.tensor(label, dtype=torch.long)
        }

train_df = pd.read_csv("学習させるラベル付きコーパス.csv")
# ラベルのユニークな値を確認
unique_labels = train_df['カラム名1'].unique()
# ユニークな値を表示
print("Unique Labels:", unique_labels)
max_label = 10
train_df['カラム名1'] = train_df['カラム名1'].apply(lambda x: min(x, max_label))
# 再度、ユニークな値を確認して修正が反映されているか確認
unique_labels_fixed = train_df['カラム名1'].unique()

# データを分割する
train_texts, val_texts, train_labels, val_labels = train_test_split(
    train_df['カラム名2'].values,
    train_df['カラム名1'].values,
    test_size=0.1,
    random_state=42
)


MAX_LEN = 128
BATCH_SIZE = 32
LEARNING_RATE = 2e-5
EPOCHS = 5

model = BertForSequenceClassification.from_pretrained('使用モデル', num_labels=10)  # ラベル数によって変更
tokenizer = BertTokenizer.from_pretrained('使用するトークナイザ')

train_dataset = CustomDataset(texts=train_texts, labels=train_labels, tokenizer=tokenizer, max_len=MAX_LEN)
val_dataset = CustomDataset(texts=val_texts, labels=val_labels, tokenizer=tokenizer, max_len=MAX_LEN)

train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)


# CrossEntropyLossを使用するための準備
loss_fn = torch.nn.CrossEntropyLoss()　　#←これはいるのか？

#学習とモデルの保存
optimizer = AdamW(model.parameters(), lr=LEARNING_RATE)

for epoch in range(EPOCHS):
    model.train()
    total_loss = 0
    for batch in tqdm(train_loader, desc=f'Epoch {epoch + 1}'):
        input_ids = batch['input_ids']
        attention_mask = batch['attention_mask']
        labels = batch['label'].squeeze()
        optimizer.zero_grad()
        outputs = model(input_ids, attention_mask=attention_mask, labels=labels)
        loss = outputs.loss
        total_loss += loss.item()
        loss.backward()
        optimizer.step()

    avg_loss = total_loss / len(train_loader)
    print(f'Epoch {epoch + 1}, Loss: {avg_loss}')
    model_save_path = "./finetuned_NK_base_model_ver2"  # 
    model.save_pretrained(model_save_path)
    tokenizer_save_path = "./finetuned_NK_base_tokenizer_ver2"  # 
    tokenizer.save_pretrained(tokenizer_save_path)



# 評価
model.eval()
val_predictions = []
val_true_labels = []

with torch.no_grad():
    for batch in tqdm(val_loader, desc='Validation'):
        input_ids = batch['input_ids']
        attention_mask = batch['attention_mask']
        labels = batch['label']
        outputs = model(input_ids, attention_mask=attention_mask)
        logits = outputs.logits
        predictions = torch.argmax(logits, dim=1).cpu().numpy()
        val_predictions.extend(predictions)
        val_true_labels.extend(labels.cpu().numpy())

# 精度の計算
accuracy = accuracy_score(val_true_labels, val_predictions)
print(f'Validation Accuracy: {accuracy}')
